vunit memac_rmii_rx_psl(memac_rmii_rx(rtl)) {

  -- clock
  default clock is rising_edge(clk);

  -- asynchronous reset (multiple assertions)
  assert always rst = '1' -> s1_crs_dv = '0';
  assert always rst = '1' -> s1_er     = '0';
  assert always rst = '1' -> s1_d      = "00";
  assert always rst = '1' -> s2_crs_dv = '0';
  assert always rst = '1' -> s2_er     = '0';
  assert always rst = '1' -> s2_d      = "00";
  assert always rst = '1' -> s3_crs_dv = '0';
  assert always rst = '1' -> s3_er     = '0';
  assert always rst = '1' -> s3_d      = "00";
  assert always rst = '1' -> s4_crs_dv = '0';
  assert always rst = '1' -> s4_er     = '0';
  assert always rst = '1' -> s4_d      = "00";
  assert always rst = '1' -> s5_act    = '0';
  assert always rst = '1' -> s5_crs    = '0';
  assert always rst = '1' -> s5_dv     = '0';
  assert always rst = '1' -> s5_er     = '0';
  assert always rst = '1' -> s5_d      = "00";
  assert always rst = '1' -> s5_dibit  = "00";
  assert always rst = '1' -> s6_stb    = '0';
  assert always rst = '1' -> s6_crs    = x"0";
  assert always rst = '1' -> s6_dv     = x"0";
  assert always rst = '1' -> s6_er     = x"0";
  assert always rst = '1' -> s6_d      = x"00";
  assert always rst = '1' -> s7_crs    = x"0";
  assert always rst = '1' -> s7_dv     = x"0";
  assert always rst = '1' -> s7_er     = x"0";
  assert always rst = '1' -> s7_d      = x"00";
  assert always rst = '1' -> umii_dv   = '0';
  assert always rst = '1' -> umii_er   = '0';
  assert always rst = '1' -> umii_d    = x"00";

  -- TODO: replace individual assertions above with single assertion below
  -- (causes GHDL crash as of 2025-01-20)
  -- asynchronous reset (single assertion)
  assert always rst = '1' ->
    s1_crs_dv = '0'   and
    s1_er     = '0'   and
    s1_d      = "00"  and
    s2_crs_dv = '0'   and
    s2_er     = '0'   and
    s2_d      = "00"  and
    s3_crs_dv = '0'   and
    s3_er     = '0'   and
    s3_d      = "00"  and
    s4_crs_dv = '0'   and
    s4_er     = '0'   and
    s4_d      = "00"  and
    s5_act    = '0'   and
    s5_crs    = '0'   and
    s5_dv     = '0'   and
    s5_er     = '0'   and
    s5_d      = "00"  and
    s5_dibit  = "00"  and
    s6_stb    = '0'   and
    s6_crs    = x"0"  and
    s6_dv     = x"0"  and
    s6_er     = x"0"  and
    s6_d      = x"00" and
    s7_crs    = x"0"  and
    s7_dv     = x"0"  and
    s7_er     = x"0"  and
    s7_d      = x"00" and
    umii_dv   = '0'   and
    umii_er   = '0'   and
    umii_d    = x"00";

  -- full speed sequences
  sequence seq_null_full_speed is
    {
      rmii_clken = '1'
    };
  sequence seq_ipg_full_speed is
    {
      rmii_clken = '1' and rmii_crs_dv = '0'
    };
  sequence seq_crs_full_speed is
    {
      rmii_clken = '1' and rmii_crs_dv = '1' and rmii_d = "00"
    };
  sequence seq_pre_full_speed is
    {
      rmii_clken = '1' and rmii_crs_dv = '1' and rmii_d = "01"
    };
  sequence seq_dv_full_speed is
    {
      rmii_clken = '1' and rmii_crs_dv = '1'
    };
  sequence seq_octet1_full_speed is {
      seq_pre_full_speed;
      seq_dv_full_speed;
      seq_null_full_speed;
      seq_dv_full_speed
    };

  -- half speed sequences
  sequence seq_null_half_speed is
    {
      rmii_clken = '0';
      rmii_clken = '1'
    };
  sequence seq_ipg_half_speed is
    {
      rmii_clken = '0';
      rmii_clken = '1' and rmii_crs_dv = '0'
    };
  sequence seq_crs_half_speed is
    {
      rmii_clken = '0';
      rmii_clken = '1' and rmii_crs_dv = '1' and rmii_d = "00"
    };
  sequence seq_pre_half_speed is
    {
      rmii_clken = '0';
      rmii_clken = '1' and rmii_crs_dv = '1' and rmii_d = "01"
    };
  sequence seq_dv_half_speed is
    {
      rmii_clken = '0';
      rmii_clken = '1' and rmii_crs_dv = '1'
    };
  sequence seq_octet1_half_speed is {
      seq_pre_half_speed;
      seq_dv_half_speed;
      seq_null_half_speed;
      seq_dv_half_speed
    };

  -- restrict reset behaviour
  restrict {
    rst = '1' and rmii_clken = '0' and umii_clken = '0' and rmii_crs_dv = '0' and rmii_er = '0' and rmii_d = "00";
    rst = '0'  [*]
  };

  -- clken negated
  assert always (
  {
    rmii_clken = '0';
    true
  } |->
    s1_crs_dv = prev( s1_crs_dv ) and
    s1_er     = prev( s1_er     ) and
    s1_d      = prev( s1_d      ) and
    s2_crs_dv = prev( s2_crs_dv ) and
    s2_er     = prev( s2_er     ) and
    s2_d      = prev( s2_d      ) and
    s3_crs_dv = prev( s3_crs_dv ) and
    s3_er     = prev( s3_er     ) and
    s3_d      = prev( s3_d      ) and
    s4_crs_dv = prev( s4_crs_dv ) and
    s4_er     = prev( s4_er     ) and
    s4_d      = prev( s4_d      ) and
    s5_act    = prev( s5_act    ) and
    s5_crs    = prev( s5_crs    ) and
    s5_dv     = prev( s5_dv     ) and
    s5_er     = prev( s5_er     ) and
    s5_d      = prev( s5_d      ) and
    s5_dibit  = prev( s5_dibit  ) and
    s6_crs    = prev( s6_crs    ) and
    s6_dv     = prev( s6_dv     ) and
    s6_er     = prev( s6_er     ) and
    s6_d      = prev( s6_d      )
    ) abort rst = '1';

  -- pipeline stages 0..4
  assert always (
  {
    rmii_clken = '1';
    true
  } |->
    s1_crs_dv = prev( rmii_crs_dv ) and
    s1_er     = prev( rmii_er     ) and
    s1_d      = prev( rmii_d      ) and
    s2_crs_dv = prev( s1_crs_dv   ) and
    s2_er     = prev( s1_er       ) and
    s2_d      = prev( s1_d        ) and
    s3_crs_dv = prev( s2_crs_dv   ) and
    s3_er     = prev( s2_er       ) and
    s3_d      = prev( s2_d        ) and
    s4_crs_dv = prev( s3_crs_dv   ) and
    s4_er     = prev( s3_er       ) and
    s4_d      = prev( s3_d        )
    ) abort rst = '1';

  -- s5_act
  assert always (
    {
      rmii_clken = '1' and s4_crs_dv = '1' and s4_d /= "00";
      true
    } |-> s5_act = '1'
  ) abort rst = '1';
  assert always (
    {
      rmii_clken = '1' and s5_act = '1' and s3_crs_dv = '0' and s4_crs_dv = '0';
      true
    } |-> s5_act = '0'
  ) abort rst = '1';

  -- s5_crs
  assert always (
    {
      rmii_clken = '1' and s5_act = '0' and s4_crs_dv = '1';
      true
    } |-> s5_crs = '1'
  ) abort rst = '1';
  assert always (
    {
      rmii_clken = '1' and s5_crs = '1' and s4_crs_dv = '0';
      true
    } |-> s5_crs = '0'
  ) abort rst = '1';

  -- s5_dv
   assert always (
     {
       rmii_clken = '1' and s5_act = '0' and s4_crs_dv = '1' and s4_d = "01";
       true
     } |-> s5_dv = '1'
   ) abort rst = '1';
   assert always (
     {
       rmii_clken = '1' and s3_crs_dv = '0' and s4_crs_dv = '0';
       true
     } |-> s5_dv = '0'
   ) abort rst = '1';

  -- s5_er
  assert always (
    {
      rmii_clken = '1';
      true
    } |-> s5_er = prev(s4_er)
  ) abort rst = '1';

  -- s5_d
  assert always (
    {
      rmii_clken = '1';
      true
    } |-> s5_d = prev(s4_d)
  ) abort rst = '1';

  -- s5_dibit
  assert always (
    {
      rmii_clken = '1' and s3_crs_dv = '0' and s4_crs_dv = '0';
      true
    } |-> s5_dibit = "00"
  ) abort rst = '1';
  assert always (
    {
      rmii_clken = '1' and s5_dv = '1' and not (s3_crs_dv = '0' and s4_crs_dv = '0');
      true
    } |-> s5_dibit = std_ulogic_vector(unsigned(prev(s5_dibit,1)) + 1)
  ) abort rst = '1';

  -- s6_dv, s6_er and s6_d
  assert always (
    {
      rmii_clken = '1';
      true
    } |->
      s6_dv ( to_integer(unsigned(prev(s5_dibit)))     ) = prev( s5_dv   ) and
      s6_er ( to_integer(unsigned(prev(s5_dibit)))     ) = prev( s5_er   ) and
      s6_d  ( to_integer(unsigned(prev(s5_dibit)))*2   ) = prev( s5_d(0) ) and
      s6_d  ( to_integer(unsigned(prev(s5_dibit)))*2+1 ) = prev( s5_d(1) )
  ) abort rst = '1';

  -- s6_stb
  assert always (
    {
      rmii_clken = '1' and s5_dibit = "11";
      true
    } |-> s6_stb = '1'
  ) abort rst = '1';
  assert always (
    {
      rmii_clken = '0' or s5_dibit /= "11";
      true
    } |-> s6_stb = '0'
  ) abort rst = '1';

  -- s7_crs, s7_dv, s7_er and s7_d
  assert always (
    {
      s6_stb = '1';
      true
    } |->
      s7_crs = prev( s6_crs ) and
      s7_dv  = prev( s6_dv  ) and
      s7_er  = prev( s6_er  ) and
      s7_d   = prev( s6_d   )
  ) abort rst = '1';
  assert always (
    {
      s6_stb = '0' and umii_clken = '0';
      true
    } |->
      s7_crs = prev( s7_crs ) and
      s7_dv  = prev( s7_dv  ) and
      s7_er  = prev( s7_er  ) and
      s7_d   = prev( s7_d   )
  ) abort rst = '1';
  assert always (
    {
      s6_stb = '0' and umii_clken = '1';
      true
    } |->
      s7_crs = x"0" and
      s7_dv  = x"0" and
      s7_er  = x"0" and
      s7_d   = x"00"
  ) abort rst = '1';

  -- umii_dv, umii_er and umii_d
  assert always (
    {
      umii_clken = '1';
      true
    } |->
      umii_dv = (prev(s7_dv(0)) or prev(s7_dv(1)) or prev(s7_dv(2)) or prev(s7_dv(3))) and
      umii_er = (prev(s7_er(0)) or prev(s7_er(1)) or prev(s7_er(2)) or prev(s7_er(3))) and
      umii_d  = prev(s7_d)
  ) abort rst = '1';
  assert always (
    {
      umii_clken = '0';
      true
    } |->
      umii_dv = prev( umii_dv ) and
      umii_er = prev( umii_er ) and
      umii_d  = prev( umii_d  )
  ) abort rst = '1';

  -- first octet to s6,s7 (full speed)
  assert always (
    {
      seq_ipg_full_speed [*2];
      seq_crs_full_speed [*0 to 3];
      seq_octet1_full_speed;
      seq_null_full_speed [*6]
    } |->
    {
      s6_dv  = prev(s5_dv,1) & prev(s5_dv,2) & prev(s5_dv,3) & prev(s5_dv,4)         and
      s6_er  = prev(rmii_er,6) & prev(rmii_er,7) & prev(rmii_er,8) & prev(rmii_er,9) and
      s6_d   = prev(rmii_d,6) & prev(rmii_d,7) & prev(rmii_d,8) & prev(rmii_d,9)     and
      s6_stb = '1';
      s7_dv = prev(s6_dv) and s7_er = prev(s6_er) and s7_d = prev(s6_d)
    }
  ) abort rst = '1';

  -- first octet to s6,s7 (half speed)
  assert always (
    {
      seq_ipg_half_speed [*2];
      seq_crs_half_speed [*0 to 3];
      seq_octet1_half_speed;
      seq_null_half_speed [*5];
      rmii_clken = '0'
    } |->
    {
      s6_dv  = prev(s5_dv,2) & prev(s5_dv,4) & prev(s5_dv,6) & prev(s5_dv,8)             and
      s6_er  = prev(rmii_er,11) & prev(rmii_er,13) & prev(rmii_er,15) & prev(rmii_er,17) and
      s6_d   = prev(rmii_d,11) & prev(rmii_d,13) & prev(rmii_d,15) & prev(rmii_d,17)     and
      s6_stb = '1';
      s7_dv = prev(s6_dv) and s7_er = prev(s6_er) and s7_d = prev(s6_d)
    }
  ) abort rst = '1';

}